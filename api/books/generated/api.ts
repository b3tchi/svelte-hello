/* tslint:disable */
/* eslint-disable */
/**
 * Books Database
 * database to manage books i read
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppCheckState
 */
export interface AppCheckState {
    /**
     * 
     * @type {string}
     * @memberof AppCheckState
     */
    'db_ping'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppCheckState
     */
    'environment'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppCheckState
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppCheckState
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface BooksDeleteConfirm
 */
export interface BooksDeleteConfirm {
    /**
     * 
     * @type {string}
     * @memberof BooksDeleteConfirm
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface BooksNewBook
 */
export interface BooksNewBook {
    /**
     * 
     * @type {number}
     * @memberof BooksNewBook
     */
    'Rating'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BooksNewBook
     */
    'genres'?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof BooksNewBook
     */
    'pages'?: number;
    /**
     * 
     * @type {number}
     * @memberof BooksNewBook
     */
    'published'?: number;
    /**
     * 
     * @type {string}
     * @memberof BooksNewBook
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface BooksUpdateBook
 */
export interface BooksUpdateBook {
    /**
     * 
     * @type {number}
     * @memberof BooksUpdateBook
     */
    'Rating'?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof BooksUpdateBook
     */
    'genres'?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof BooksUpdateBook
     */
    'pages'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BooksUpdateBook
     */
    'published'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BooksUpdateBook
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface DtoBook
 */
export interface DtoBook {
    /**
     * 
     * @type {Array<string>}
     * @memberof DtoBook
     */
    'genres'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof DtoBook
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DtoBook
     */
    'pages'?: number;
    /**
     * 
     * @type {number}
     * @memberof DtoBook
     */
    'published'?: number;
    /**
     * 
     * @type {number}
     * @memberof DtoBook
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof DtoBook
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface RestErrResponse
 */
export interface RestErrResponse {
    /**
     * Application-specific error code.
     * @type {number}
     * @memberof RestErrResponse
     */
    'code'?: number;
    /**
     * Application context.
     * @type {{ [key: string]: any; }}
     * @memberof RestErrResponse
     */
    'context'?: { [key: string]: any; };
    /**
     * Error message.
     * @type {string}
     * @memberof RestErrResponse
     */
    'error'?: string;
    /**
     * Status text.
     * @type {string}
     * @memberof RestErrResponse
     */
    'status'?: string;
}

/**
 * BooksApi - axios parameter creator
 * @export
 */
export const BooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create
         * @param {BooksNewBook} [booksNewBook] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksCreate: async (booksNewBook?: BooksNewBook, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(booksNewBook, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBooksDelete', 'id', id)
            const localVarPath = `/v1/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBooksRead', 'id', id)
            const localVarPath = `/v1/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update
         * @param {string} id 
         * @param {BooksUpdateBook} [booksUpdateBook] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksUpdate: async (id: string, booksUpdateBook?: BooksUpdateBook, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBooksUpdate', 'id', id)
            const localVarPath = `/v1/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(booksUpdateBook, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BooksApi - functional programming interface
 * @export
 */
export const BooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create
         * @param {BooksNewBook} [booksNewBook] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksCreate(booksNewBook?: BooksNewBook, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoBook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksCreate(booksNewBook, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooksDeleteConfirm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DtoBook>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoBook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update
         * @param {string} id 
         * @param {BooksUpdateBook} [booksUpdateBook] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBooksUpdate(id: string, booksUpdateBook?: BooksUpdateBook, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoBook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksUpdate(id, booksUpdateBook, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BooksApi - factory interface
 * @export
 */
export const BooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BooksApiFp(configuration)
    return {
        /**
         * 
         * @summary Create
         * @param {BooksNewBook} [booksNewBook] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksCreate(booksNewBook?: BooksNewBook, options?: any): AxiosPromise<DtoBook> {
            return localVarFp.apiBooksCreate(booksNewBook, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksDelete(id: string, options?: any): AxiosPromise<BooksDeleteConfirm> {
            return localVarFp.apiBooksDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksList(options?: any): AxiosPromise<Array<DtoBook>> {
            return localVarFp.apiBooksList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksRead(id: string, options?: any): AxiosPromise<DtoBook> {
            return localVarFp.apiBooksRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update
         * @param {string} id 
         * @param {BooksUpdateBook} [booksUpdateBook] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBooksUpdate(id: string, booksUpdateBook?: BooksUpdateBook, options?: any): AxiosPromise<DtoBook> {
            return localVarFp.apiBooksUpdate(id, booksUpdateBook, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BooksApi - object-oriented interface
 * @export
 * @class BooksApi
 * @extends {BaseAPI}
 */
export class BooksApi extends BaseAPI {
    /**
     * 
     * @summary Create
     * @param {BooksNewBook} [booksNewBook] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksCreate(booksNewBook?: BooksNewBook, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksCreate(booksNewBook, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksDelete(id: string, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksList(options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksRead(id: string, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update
     * @param {string} id 
     * @param {BooksUpdateBook} [booksUpdateBook] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public apiBooksUpdate(id: string, booksUpdateBook?: BooksUpdateBook, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).apiBooksUpdate(id, booksUpdateBook, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHealthcheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/healthcheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appHealthcheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppCheckState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appHealthcheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthCheckApiFp(configuration)
    return {
        /**
         * 
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHealthcheck(options?: any): AxiosPromise<AppCheckState> {
            return localVarFp.appHealthcheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
    /**
     * 
     * @summary Healthcheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public appHealthcheck(options?: AxiosRequestConfig) {
        return HealthCheckApiFp(this.configuration).appHealthcheck(options).then((request) => request(this.axios, this.basePath));
    }
}


